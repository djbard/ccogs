################################################################################
# INSTALL
################################################################################

This file will walk you through the compilation and installation process. The 
accompanying README file can show you how to run the code and verify that you've
installed it properly.

################################################################################
# Requirements 
################################################################################

These directions assume you are installing this in a Linux environment.

-------------------------------
# Requrements for GPU code.
-------------------------------
gcc: C/C++ compiler. Tested with 4.1.

make: Standard compilation utility.

CUDA: Tested with version 4.1. It is possible that this code will work with 
older versions, but you make sure that the version you have supports the
atomicAdd() function (introduced in 2.0).

----------------------------------------------
# Requrements for testing and plotting code.
----------------------------------------------
csh: The test scripts have been written in C-shell.

python,matplotlib,numpy: These tools have been used to perform the final
calculation of the 3-pt correlation function, but you are free to use
other tools if you so desire. 

sdiff,awk: Standard *nix tools used in the tests of the installation.




################################################################################
# Compiling and installing
################################################################################

From this directory, descend into the src direction and type ``make". That's it!

    cd src
    make

If all has gone well, this will create a "bin" directory under "three_point_correlation_function",
compile both the GPU executable "3pcf" and the C-version
"3pcf_C_version" and place them in the "bin" directory.

----------------------------------------------
# Tweaking the build and installation.
----------------------------------------------

Let's take a closer look at the Makefile and what you may want to change either
because of personal preference, or by necessity. 

* Installation location.

    INSTALL_DIR       := ../bin/
   
The test scripts will assume that the executables are located here. However,
depending on your setup and how many people will be using this code, you may
want to change this to a location common to users "PATH"s like "/usr/local/bin".

In any event, for general usage, you will want the installation directory to be
in the users "PATH" variable.

* Libraries.

    SDK_INSTALL_PATH  := ${HOME}/CUDA/SDK_4.0/
    CUDA_INSTALL_PATH := /opt/cuda/
    
You may have to edit thse paths to point to where your CUDA libraries and SDK
are installed. Note that these paths appear in the definitions of the include
files and library paths. There is a chance you may have to edit these as well.

    INCLUDES          += -I. -I$(SDK_INSTALL_PATH)/C/common/inc/ -I$(CUDA_INSTALL_PATH)/include/
    LIBS              += -L. -L$(SDK_INSTALL_PATH)/C/lib/ -L$(CUDA_INSTALL_PATH)//usr/lib/x86_64-linux-gnu/
    LIBS              += -L$(CUDA_INSTALL_PATH)/lib64

We have found many CUDA installations to be somewhat different and rather than 
trying to provide a fix for every set-up, we have merely tried to provide some 
guidance. If you are still having problems, please consult us or the NVIDIA 
CUDA documentation.






